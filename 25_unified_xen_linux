#!/usr/bin/sh
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix="/usr"
exec_prefix="/usr"
datarootdir="/usr/share"

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class gnu-linux --class gnu --class os --class xen"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ]; then
	OS="$(sed 's, release .*$,,g' /etc/system-release)"
else
	OS="${GRUB_DISTRIBUTOR}"
	CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1 | LC_ALL=C sed 's,[^[:alnum:]_],_,g') ${CLASS}"
fi

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
/dev/loop/* | /dev/loop[0-9])
	GRUB_DEVICE=$(losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/")
	;;
esac

# Default to disabling partition uuid support to maintian compatibility with
# older kernels.
GRUB_DISABLE_LINUX_PARTUUID=${GRUB_DISABLE_LINUX_PARTUUID-true}

# btrfs may reside on multiple devices. We cannot pass them as value of root= parameter
# and mounting btrfs requires user space scanning, so force UUID in this case.
if ([ "x${GRUB_DEVICE_UUID}" = "x" ] && [ "x${GRUB_DEVICE_PARTUUID}" = "x" ]) ||
	([ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] &&
		[ "x${GRUB_DISABLE_LINUX_PARTUUID}" = "xtrue" ]) ||
	(! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" &&
		! test -e "/dev/disk/by-partuuid/${GRUB_DEVICE_PARTUUID}") ||
	(test -e "${GRUB_DEVICE}" && uses_abstraction "${GRUB_DEVICE}" lvm); then
	LINUX_ROOT_DEVICE=${GRUB_DEVICE}
elif [ "x${GRUB_DEVICE_UUID}" = "x" ] ||
	[ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ]; then
	LINUX_ROOT_DEVICE=PARTUUID=${GRUB_DEVICE_PARTUUID}
else
	LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
fi

# Allow overriding GRUB_CMDLINE_LINUX and GRUB_CMDLINE_LINUX_DEFAULT.
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE}" ]; then
	GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX_XEN_REPLACE}"
fi
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}" ]; then
	GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}"
fi

case x"$GRUB_FS" in
xbtrfs)
	if [ "x${SUSE_BTRFS_SNAPSHOT_BOOTING}" = "xtrue" ]; then
		GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX} \${extra_cmdline}"
	else
		rootsubvol="$(make_system_path_relative_to_its_root /)"
		rootsubvol="${rootsubvol#/}"
		if [ "x${rootsubvol}" != x ]; then
			GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
		fi
	fi
	;;
xzfs)
	rpool=$(${grub_probe} --device ${GRUB_DEVICE} --target=fs_label 2>/dev/null || true)
	bootfs="$(make_system_path_relative_to_its_root / | sed -e "s,@$,,")"
	LINUX_ROOT_DEVICE="ZFS=${rpool}${bootfs%/}"
	;;
esac

title_correction_code=

linux_entry() {
	os="$1"
	version="$2"
	xen_version="$3"
	type="$4"
	args="$5"
	xen_args="$6"
	if [ -z "$boot_device_id" ]; then
		boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
	fi

	if [ x$type != xsimple ]; then
		title="$(gettext_printf "%s, with Unified Xen %s and Linux %s" "${os}" "${xen_version}" "${version}")"
		echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'uki-xen-${xen_version}-gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
	else
		title="$(gettext_printf "%s, with Unified Xen Linux" "${os}")"
		echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'uki-xen-gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
	fi

	if [ -z "${prepare_boot_cache}" ]; then
		prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | grub_add_tab)"
	fi
	printf '%s\n' "${prepare_boot_cache}" | sed "s/^/$submenu_indentation/"

	xmessage="$(gettext_printf "Loading Unified Xen %s with Linux %s..." ${xen_version} ${version})"
	sed "s/^/$submenu_indentation/" <<EOF
	echo	'$(echo "$xmessage" | grub_quote)'
        if [ "\$grub_platform" = "pc" -o "\$grub_platform" = "" ]; then
            xen_rm_opts=
        else
            xen_rm_opts="no-real-mode edd=off"
        fi
	insmod chainload
	chainloader ${rel_xen_dirname}/${xen_basename} placeholder ${xen_args} \${xen_rm_opts} -- placeholder root=${linux_root_device_thisversion} ro ${args}
EOF
	sed "s/^/$submenu_indentation/" <<EOF
}
EOF
}

file_is_not_xen_garbage() {
	case "$1" in
	*/xen-syms-*)
		return 1
		;;
	*/xenpolicy-*)
		return 1
		;;
	*/*.config)
		return 1
		;;
	*)
		return 0
		;;
	esac
}

xen_list=
for i in /boot/uki-xen-signed*; do
	if grub_file_is_not_garbage "$i" && file_is_not_xen_garbage "$i"; then xen_list="$xen_list $i"; fi
done

# WIP: To activate for final integration
#if [ "$grub_platform" != "efi" ]; then
#    exit 0
#fi

if [ "x${xen_list}" = "x" ]; then
	exit 0
fi

prepare_boot_cache=
boot_device_id=
title_correction_code=
machine=$(uname -m)

case "$machine" in
i?86) GENKERNEL_ARCH="x86" ;;
mips | mips64) GENKERNEL_ARCH="mips" ;;
mipsel | mips64el) GENKERNEL_ARCH="mipsel" ;;
arm*) GENKERNEL_ARCH="arm" ;;
*) GENKERNEL_ARCH="$machine" ;;
esac

# Extra indentation to add to menu entries in a submenu. We're not in a submenu
# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
submenu_indentation=""

is_top_level=true

while [ "x${xen_list}" != "x" ]; do
	current_xen=$(version_find_latest $xen_list)
	xen_basename=$(basename ${current_xen})
	xen_dirname=$(dirname ${current_xen})
	rel_xen_dirname=$(make_system_path_relative_to_its_root $xen_dirname)
	xen_version=$(echo $xen_basename | cut -d '+' -f1 | sed -e "s,^uki-xen-signed-,,g;s,r,-,")
	version=$(echo $xen_basename | cut -d '+' -f2 | sed -e "s,.efi$,,g;s,r,-,")

	if [ -z "$boot_device_id" ]; then
		boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
	fi

	linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

	if [ "x$is_top_level" = xtrue ] && [ "x${GRUB_DISABLE_SUBMENU}" != xtrue ]; then
		linux_entry "${OS}" "${version}" "${xen_version}" simple \
			"${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}" "${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_DEFAULT}"

		submenu_indentation="$grub_tab"

		echo "submenu '$(gettext_printf "Advanced options for %s (with Unified Xen Linux)" "${OS}" | grub_quote)' \$menuentry_id_option 'uki-advanced-$boot_device_id' {"
		is_top_level=false
	fi

	linux_entry "${OS}" "${version}" "${xen_version}" advanced \
		"${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}" "${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_DEFAULT}"

	xen_list=$(echo $xen_list | tr ' ' '\n' | grep -Fvx "$current_xen" | tr '\n' ' ')
done

# If at least one kernel was found, then we need to
# add a closing '}' for the submenu command.
if [ x"$is_top_level" != xtrue ]; then
	echo '}'
fi

echo "$title_correction_code"
